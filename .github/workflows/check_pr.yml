name: Check PR

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - labeled
      - unlabeled
      - reopened
      - edited

permissions:
  pull-requests: write


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  auto_assign:
    name: Auto Assign

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Assign Me
        # You may pin to the exact commit or the version.
        uses: kentaro-m/auto-assign-action@v1.2.1
        with:
          configuration-path: '.github/auto_assign.yml'

  check_labels:
    name: Check Required Labels
    runs-on: ubuntu-latest

    steps:
      - name: Verify PR Labels
        uses: actions/github-script@v6.3.3
        env:
          VALID_LABELS: patch-release, minor-release, major-release, ignore-for-release
          PR_LABELS: github.event.pull_request.labels.*.name
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { VALID_LABELS } = process.env
            const validLabels = VALID_LABELS.trim().split(',').map(word => word.trim()).filter(word => word.length > 0);
            var labelsQuery = await github.rest.issues.listLabelsOnIssue({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
            var prLabels = labelsQuery.data.map(label => label.name);
            core.info(`PR labels: ${prLabels}`);
            core.info(`Valid labels: ${validLabels}`);
            var matchedLabels = [];
            prLabels.forEach(label => {
              core.info(`Analyzing label: ${label}`)
               if(validLabels.includes(label)) {
                matchedLabels.push(label)
               }
              }
            );
            core.info(`Matched labels: ${matchedLabels}`)
            var comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const comment of comments.data) {
              if (comment.body.includes('This pull request does not contain a valid label')) {
                github.rest.issues.deleteComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                })
              }
            }
            
            if (matchedLabels.length != 1) {
            const errorMessage = `Pull request must contains only one of the following labels \`${process.env.VALID_LABELS}\`. Found labels: \`${matchedLabels}\``
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorMessage
              })
              core.setFailed('Missing required labels')
            }

  check_size:
    runs-on: ubuntu-latest
    name: Check Size
    steps:

      - name: Check PR Size
        uses: pagopa/github-actions-template/check-pr-size@3fae741d94bcb9873f2447e95cc4ddea6f77be4d
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          ignored_files: 'src/test/'